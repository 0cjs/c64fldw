
MEMORY
{
    LOADERZP:      start =   $4c, size =   $44, type = rw; # must not overlap STATUS ($90)
    ZPRAM:         start =   $fa, size =   $06, type = rw;
    # the C STACK memory area must be defined in the applications's link file
    # when using the importldr function to dynamically link the loader
    STACK:         start = $0100, size =   $80, type = rw, define = yes;
    RAM:           start = $1000, size = $c000, type = rw; # Plus/4 has screen and colours at $0800-$1000
    RAM2:          start = $1000, size = $f000, type = rw;
}

SEGMENTS
{
    ZEROPAGE:       load = ZPRAM, type = zp;

    CODE:           load = RAM,   type = ro;
    RODATA:         load = RAM,   type = ro, optional = yes;
    DATA:           load = RAM,   type = rw, optional = yes;
    BSS:            load = RAM,   type = rw, optional = yes;

    COLRAM:         load = RAM2,  type = bss, start = $5000, optional = yes, define = yes; # $1000 bytes on Plus/4 (SPRITES segment not used)
    SPRITES:        load = RAM2,  type = bss, start = $5c00, optional = yes, define = yes; # no SPRITESHI segment: the sprites are always in this bank
    BITMAP:         load = RAM2,  type = bss, start = $6000, optional = yes, define = yes; # overlay with DISKIO_INSTALL

    VERIFYBUFFER:   load = RAM2,  type = bss, start = $8000, optional = yes, define = yes;

    BITMAPHI:       load = RAM2,  type = bss, start = $c000, optional = yes, define = yes; # also location of IEEE-488 KERNAL extensions with SFD-1001
    COLRAMHI:       load = RAM2,  type = bss, start = $f000, optional = yes, define = yes; # not used on Plus/4

    # these three segments must be defined in the application's link file
    DISKIO_ZP:      load = LOADERZP, type  = zp,    define = yes;
    DISKIO:         load = RAM,      start = $3000, define = yes;
    DISKIO_INSTALL: load = RAM,      start = $3800, define = yes; # fire and forget

    END:            load = RAM,      align = $0100;
}
